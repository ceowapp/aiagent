/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-xarrows";
exports.ids = ["vendor-chunks/react-xarrows"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-xarrows/lib/index.js":
/*!*************************************************!*\
  !*** ./node_modules/react-xarrows/lib/index.js ***!
  \*************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"), __webpack_require__(/*! lodash */ \"(ssr)/./node_modules/lodash/lodash.js\"), __webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\"));\n\telse {}\n})(this, function(__WEBPACK_EXTERNAL_MODULE_react__, __WEBPACK_EXTERNAL_MODULE_lodash__, __WEBPACK_EXTERNAL_MODULE_prop_types__) {\nreturn /******/ (function() { // webpackBootstrap\n/******/ \t\"use strict\";\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ \"./src/Xarrow/utils/buzzier.js\":\n/*!*************************************!*\\\n  !*** ./src/Xarrow/utils/buzzier.js ***!\n  \\*************************************/\n/***/ (function(__unused_webpack_module, __nested_webpack_exports__, __nested_webpack_require_1031__) {\n\n__nested_webpack_require_1031__.r(__nested_webpack_exports__);\n/* harmony export */ __nested_webpack_require_1031__.d(__nested_webpack_exports__, {\n/* harmony export */   \"bzFunction\": function() { return /* binding */ bzFunction; },\n/* harmony export */   \"buzzierMinSols\": function() { return /* binding */ buzzierMinSols; }\n/* harmony export */ });\n// Buzier curve calculations\n\n/**\r\n * returns buzzier curve function with 2 controls points\r\n * bzCurve with 2 control points function(4 points total):  bz = (1−t)^3*p1 + 3(1−t)^2*t*p2 +3(1−t)*t^2*p3 + t^3*p4\r\n */\nvar bzFunction = function bzFunction(p1, p2, p3, p4) {\n  return function (t) {\n    return Math.pow(1 - t, 3) * p1 + 3 * Math.pow(1 - t, 2) * t * p2 + 3 * (1 - t) * Math.pow(t, 2) * p3 + Math.pow(t, 3) * p4;\n  };\n};\n/**\r\n * returns 2 solutions from extram points for buzzier curve with 2 controls points\r\n */\n\nvar buzzierMinSols = function buzzierMinSols(p1, p2, p3, p4) {\n  var bz = bzFunction(p1, p2, p3, p4); // dt(bz) = -3 p1 (1 - t)^2 + 3 p2 (1 - t)^2 - 6 p2 (1 - t) t + 6 p3 (1 - t) t - 3 p3 t^2 + 3 p4 t^2\n  // when p1=(x1,y1),p2=(cpx1,cpy1),p3=(cpx2,cpy2),p4=(x2,y2)\n  // then extrema points is when dt(bz) = 0\n  // solutions =>  t = ((-6 p1 + 12 p2 - 6 p3) ± sqrt((6 p1 - 12 p2 + 6 p3)^2 - 4 (3 p2 - 3 p1) (-3 p1 + 9 p2 - 9 p3 + 3 p4)))/(2 (-3 p1 + 9 p2 - 9 p3 + 3 p4))  when (p1 + 3 p3!=3 p2 + p4)\n  // if we mark A=(-6 p1 + 12 p2 - 6 p3) and B=(6 p1 - 12 p2 + 6 p3)^2 - 4 (3 p2 - 3 p1) (-3 p1 + 9 p2 - 9 p3 + 3 p4)) and C =(2 (-3 p1 + 9 p2 - 9 p3 + 3 p4) then\n  // tSol = A ± sqrt(B)\n  // then solution we want is: bz(tSol)\n\n  var A = -6 * p1 + 12 * p2 - 6 * p3;\n  var B = Math.pow(-6 * p1 + 12 * p2 - 6 * p3, 2) - 4 * (3 * p2 - 3 * p1) * (-3 * p1 + 9 * p2 - 9 * p3 + 3 * p4);\n  var C = 2 * (-3 * p1 + 9 * p2 - 9 * p3 + 3 * p4);\n  var sol1 = bz((A + Math.sqrt(B)) / C);\n  var sol2 = bz((A - Math.sqrt(B)) / C);\n  return [sol1, sol2];\n};\n\n/***/ }),\n\n/***/ \"./src/Xarrow/Xarrow.tsx\":\n/*!*******************************!*\\\n  !*** ./src/Xarrow/Xarrow.tsx ***!\n  \\*******************************/\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_3135__) {\n\n\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nvar __spreadArray = (this && this.__spreadArray) || function (to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nvar react_1 = __importStar(__nested_webpack_require_3135__(/*! react */ \"react\"));\r\nvar useXarrowProps_1 = __importDefault(__nested_webpack_require_3135__(/*! ./useXarrowProps */ \"./src/Xarrow/useXarrowProps.ts\"));\r\nvar Xwrapper_1 = __nested_webpack_require_3135__(/*! ../Xwrapper */ \"./src/Xwrapper.tsx\");\r\nvar propTypes_1 = __importDefault(__nested_webpack_require_3135__(/*! ./propTypes */ \"./src/Xarrow/propTypes.ts\"));\r\nvar GetPosition_1 = __nested_webpack_require_3135__(/*! ./utils/GetPosition */ \"./src/Xarrow/utils/GetPosition.tsx\");\r\nvar log = console.log;\r\nvar Xarrow = function (props) {\r\n    // log('xarrow update');\r\n    var _a;\r\n    var mainRef = react_1.useRef({\r\n        svgRef: react_1.useRef(null),\r\n        lineRef: react_1.useRef(null),\r\n        headRef: react_1.useRef(null),\r\n        tailRef: react_1.useRef(null),\r\n        lineDrawAnimRef: react_1.useRef(null),\r\n        lineDashAnimRef: react_1.useRef(null),\r\n        headOpacityAnimRef: react_1.useRef(null),\r\n    });\r\n    var _b = mainRef.current, svgRef = _b.svgRef, lineRef = _b.lineRef, headRef = _b.headRef, tailRef = _b.tailRef, lineDrawAnimRef = _b.lineDrawAnimRef, lineDashAnimRef = _b.lineDashAnimRef, headOpacityAnimRef = _b.headOpacityAnimRef;\r\n    react_1.useContext(Xwrapper_1.XarrowContext);\r\n    var xProps = useXarrowProps_1.default(props, mainRef.current);\r\n    var propsRefs = xProps[0];\r\n    var labels = propsRefs.labels, lineColor = propsRefs.lineColor, headColor = propsRefs.headColor, tailColor = propsRefs.tailColor, strokeWidth = propsRefs.strokeWidth, showHead = propsRefs.showHead, showTail = propsRefs.showTail, dashness = propsRefs.dashness, headShape = propsRefs.headShape, tailShape = propsRefs.tailShape, showXarrow = propsRefs.showXarrow, animateDrawing = propsRefs.animateDrawing, zIndex = propsRefs.zIndex, passProps = propsRefs.passProps, arrowBodyProps = propsRefs.arrowBodyProps, arrowHeadProps = propsRefs.arrowHeadProps, arrowTailProps = propsRefs.arrowTailProps, SVGcanvasProps = propsRefs.SVGcanvasProps, divContainerProps = propsRefs.divContainerProps, divContainerStyle = propsRefs.divContainerStyle, SVGcanvasStyle = propsRefs.SVGcanvasStyle, _debug = propsRefs._debug, shouldUpdatePosition = propsRefs.shouldUpdatePosition;\r\n    animateDrawing = props.animateDrawing;\r\n    var _c = react_1.useState(!animateDrawing), drawAnimEnded = _c[0], setDrawAnimEnded = _c[1];\r\n    var _d = react_1.useState({}), setRender = _d[1];\r\n    var forceRerender = function () { return setRender({}); };\r\n    var _e = react_1.useState({\r\n        //initial state\r\n        cx0: 0,\r\n        cy0: 0,\r\n        cw: 0,\r\n        ch: 0,\r\n        x1: 0,\r\n        y1: 0,\r\n        x2: 0,\r\n        y2: 0,\r\n        dx: 0,\r\n        dy: 0,\r\n        absDx: 0,\r\n        absDy: 0,\r\n        cpx1: 0,\r\n        cpy1: 0,\r\n        cpx2: 0,\r\n        cpy2: 0,\r\n        headOrient: 0,\r\n        tailOrient: 0,\r\n        arrowHeadOffset: { x: 0, y: 0 },\r\n        arrowTailOffset: { x: 0, y: 0 },\r\n        headOffset: 0,\r\n        excRight: 0,\r\n        excLeft: 0,\r\n        excUp: 0,\r\n        excDown: 0,\r\n        startPoints: [],\r\n        endPoints: [],\r\n        mainDivPos: { x: 0, y: 0 },\r\n        xSign: 1,\r\n        ySign: 1,\r\n        lineLength: 0,\r\n        fHeadSize: 1,\r\n        fTailSize: 1,\r\n        arrowPath: \"\",\r\n        labelStartPos: { x: 0, y: 0 },\r\n        labelMiddlePos: { x: 0, y: 0 },\r\n        labelEndPos: { x: 0, y: 0 },\r\n    }), st = _e[0], setSt = _e[1];\r\n    /**\r\n     * The Main logic of path calculation for the arrow.\r\n     * calculate new path, adjusting canvas, and set state based on given properties.\r\n     * */\r\n    react_1.useLayoutEffect(function () {\r\n        if (shouldUpdatePosition.current) {\r\n            // log('xarrow getPosition');\r\n            var pos = GetPosition_1.getPosition(xProps, mainRef);\r\n            // log('pos', pos);\r\n            setSt(pos);\r\n            shouldUpdatePosition.current = false;\r\n        }\r\n    });\r\n    // log('st', st);\r\n    var xOffsetHead = st.x2 - st.arrowHeadOffset.x;\r\n    var yOffsetHead = st.y2 - st.arrowHeadOffset.y;\r\n    var xOffsetTail = st.x1 - st.arrowTailOffset.x;\r\n    var yOffsetTail = st.y1 - st.arrowTailOffset.y;\r\n    var dashoffset = dashness.strokeLen + dashness.nonStrokeLen;\r\n    var animDirection = 1;\r\n    if (dashness.animation < 0) {\r\n        dashness.animation *= -1;\r\n        animDirection = -1;\r\n    }\r\n    var dashArray, animation, animRepeatCount, animStartValue, animEndValue = 0;\r\n    if (animateDrawing && drawAnimEnded == false) {\r\n        if (typeof animateDrawing === 'boolean')\r\n            animateDrawing = 1;\r\n        animation = animateDrawing + 's';\r\n        dashArray = st.lineLength;\r\n        animStartValue = st.lineLength;\r\n        animRepeatCount = 1;\r\n        if (animateDrawing < 0) {\r\n            _a = [animEndValue, animStartValue], animStartValue = _a[0], animEndValue = _a[1];\r\n            animation = animateDrawing * -1 + 's';\r\n        }\r\n    }\r\n    else {\r\n        dashArray = dashness.strokeLen + \" \" + dashness.nonStrokeLen;\r\n        animation = 1 / dashness.animation + \"s\";\r\n        animStartValue = dashoffset * animDirection;\r\n        animRepeatCount = 'indefinite';\r\n        animEndValue = 0;\r\n    }\r\n    // handle draw animation\r\n    react_1.useLayoutEffect(function () {\r\n        if (lineRef.current)\r\n            setSt(function (prevSt) { var _a, _b; return (__assign(__assign({}, prevSt), { lineLength: (_b = (_a = lineRef.current) === null || _a === void 0 ? void 0 : _a.getTotalLength()) !== null && _b !== void 0 ? _b : 0 })); });\r\n    }, [lineRef.current]);\r\n    // set all props on first render\r\n    react_1.useEffect(function () {\r\n        var monitorDOMchanges = function () {\r\n            window.addEventListener('resize', forceRerender);\r\n            var handleDrawAmimEnd = function () {\r\n                var _a, _b;\r\n                setDrawAnimEnded(true);\r\n                // @ts-ignore\r\n                (_a = headOpacityAnimRef.current) === null || _a === void 0 ? void 0 : _a.beginElement();\r\n                // @ts-ignore\r\n                (_b = lineDashAnimRef.current) === null || _b === void 0 ? void 0 : _b.beginElement();\r\n            };\r\n            var handleDrawAmimBegin = function () { return (headRef.current.style.opacity = '0'); };\r\n            if (lineDrawAnimRef.current && headRef.current) {\r\n                lineDrawAnimRef.current.addEventListener('endEvent', handleDrawAmimEnd);\r\n                lineDrawAnimRef.current.addEventListener('beginEvent', handleDrawAmimBegin);\r\n            }\r\n            return function () {\r\n                window.removeEventListener('resize', forceRerender);\r\n                if (lineDrawAnimRef.current) {\r\n                    lineDrawAnimRef.current.removeEventListener('endEvent', handleDrawAmimEnd);\r\n                    if (headRef.current)\r\n                        lineDrawAnimRef.current.removeEventListener('beginEvent', handleDrawAmimBegin);\r\n                }\r\n            };\r\n        };\r\n        var cleanMonitorDOMchanges = monitorDOMchanges();\r\n        return function () {\r\n            setDrawAnimEnded(false);\r\n            cleanMonitorDOMchanges();\r\n        };\r\n    }, [showXarrow]);\r\n    //todo: could make some advanced generic typescript inferring. for example get type from headShape.elem:T and\r\n    // tailShape.elem:K force the type for passProps,arrowHeadProps,arrowTailProps property. for now `as any` is used to\r\n    // avoid typescript conflicts\r\n    // so todo- fix all the `passProps as any` assertions\r\n    return (react_1.default.createElement(\"div\", __assign({}, divContainerProps, { style: __assign({ position: 'absolute', zIndex: zIndex }, divContainerStyle) }), showXarrow ? (react_1.default.createElement(react_1.default.Fragment, null,\r\n        react_1.default.createElement(\"svg\", __assign({ ref: svgRef, width: st.cw, height: st.ch, style: __assign({ position: 'absolute', left: st.cx0, top: st.cy0, pointerEvents: 'none', border: _debug ? '1px dashed yellow' : null }, SVGcanvasStyle), overflow: \"auto\" }, SVGcanvasProps),\r\n            react_1.default.createElement(\"path\", __assign({ ref: lineRef, d: st.arrowPath, stroke: lineColor, strokeDasharray: dashArray, \r\n                // strokeDasharray={'0 0'}\r\n                strokeWidth: strokeWidth, fill: \"transparent\", pointerEvents: \"visibleStroke\" }, passProps, arrowBodyProps),\r\n                react_1.default.createElement(react_1.default.Fragment, null, drawAnimEnded ? (react_1.default.createElement(react_1.default.Fragment, null, dashness.animation ? (react_1.default.createElement(\"animate\", { ref: lineDashAnimRef, attributeName: \"stroke-dashoffset\", values: dashoffset * animDirection + \";0\", dur: 1 / dashness.animation + \"s\", repeatCount: \"indefinite\" })) : null)) : (react_1.default.createElement(react_1.default.Fragment, null, animateDrawing ? (react_1.default.createElement(\"animate\", { ref: lineDrawAnimRef, id: \"svgEndAnimate\", attributeName: \"stroke-dashoffset\", values: animStartValue + \";\" + animEndValue, dur: animation, repeatCount: animRepeatCount })) : null)))),\r\n            showTail ? (react_1.default.createElement(\"g\", __assign({ fill: tailColor, pointerEvents: \"auto\", transform: \"translate(\" + xOffsetTail + \",\" + yOffsetTail + \") rotate(\" + st.tailOrient + \") scale(\" + st.fTailSize + \")\" }, passProps, arrowTailProps), tailShape.svgElem)) : null,\r\n            showHead ? (react_1.default.createElement(\"g\", __assign({ ref: headRef, \r\n                // d={normalArrowShape}\r\n                fill: headColor, pointerEvents: \"auto\", transform: \"translate(\" + xOffsetHead + \",\" + yOffsetHead + \") rotate(\" + st.headOrient + \") scale(\" + st.fHeadSize + \")\", opacity: animateDrawing && !drawAnimEnded ? 0 : 1 }, passProps, arrowHeadProps),\r\n                react_1.default.createElement(\"animate\", { ref: headOpacityAnimRef, dur: '0.4', attributeName: \"opacity\", from: \"0\", to: \"1\", begin: \"indefinite\", repeatCount: \"0\", fill: \"freeze\" }),\r\n                headShape.svgElem)) : null,\r\n            _debug ? (react_1.default.createElement(react_1.default.Fragment, null,\r\n                react_1.default.createElement(\"circle\", { r: \"5\", cx: st.cpx1, cy: st.cpy1, fill: \"green\" }),\r\n                react_1.default.createElement(\"circle\", { r: \"5\", cx: st.cpx2, cy: st.cpy2, fill: \"blue\" }),\r\n                react_1.default.createElement(\"rect\", { x: st.excLeft, y: st.excUp, width: st.absDx, height: st.absDy, fill: \"none\", stroke: \"pink\", strokeWidth: \"2px\" }))) : null),\r\n        labels.start ? (react_1.default.createElement(\"div\", { style: {\r\n                transform: st.dx < 0 ? 'translate(-100% , -50%)' : 'translate(-0% , -50%)',\r\n                width: 'max-content',\r\n                position: 'absolute',\r\n                left: st.cx0 + st.labelStartPos.x,\r\n                top: st.cy0 + st.labelStartPos.y - strokeWidth - 5,\r\n            } }, labels.start)) : null,\r\n        labels.middle ? (react_1.default.createElement(\"div\", { style: {\r\n                display: 'table',\r\n                width: 'max-content',\r\n                transform: 'translate(-50% , -50%)',\r\n                position: 'absolute',\r\n                left: st.cx0 + st.labelMiddlePos.x,\r\n                top: st.cy0 + st.labelMiddlePos.y,\r\n            } }, labels.middle)) : null,\r\n        labels.end ? (react_1.default.createElement(\"div\", { style: {\r\n                transform: st.dx > 0 ? 'translate(-100% , -50%)' : 'translate(-0% , -50%)',\r\n                width: 'max-content',\r\n                position: 'absolute',\r\n                left: st.cx0 + st.labelEndPos.x,\r\n                top: st.cy0 + st.labelEndPos.y + strokeWidth + 5,\r\n            } }, labels.end)) : null,\r\n        _debug ? (react_1.default.createElement(react_1.default.Fragment, null, __spreadArray(__spreadArray([], st.startPoints), st.endPoints).map(function (p, i) {\r\n            return (react_1.default.createElement(\"div\", { key: i, style: {\r\n                    background: 'gray',\r\n                    opacity: 0.5,\r\n                    borderRadius: '50%',\r\n                    transform: 'translate(-50%, -50%)',\r\n                    height: 5,\r\n                    width: 5,\r\n                    position: 'absolute',\r\n                    left: p.x - st.mainDivPos.x,\r\n                    top: p.y - st.mainDivPos.y,\r\n                } }));\r\n        }))) : null)) : null));\r\n};\r\n//////////////////////////////\r\n// propTypes\r\nXarrow.propTypes = propTypes_1.default;\r\nexports.default = Xarrow;\r\n\n\n/***/ }),\n\n/***/ \"./src/Xarrow/anchors.ts\":\n/*!*******************************!*\\\n  !*** ./src/Xarrow/anchors.ts ***!\n  \\*******************************/\n/***/ (function(module, exports, __nested_webpack_require_17429__) {\n\n/* module decorator */ module = __nested_webpack_require_17429__.nmd(module);\n\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.calcAnchors = void 0;\r\nvar getAnchorsDefaultOffsets = function (width, height) {\r\n    return {\r\n        middle: { x: width * 0.5, y: height * 0.5 },\r\n        left: { x: 0, y: height * 0.5 },\r\n        right: { x: width, y: height * 0.5 },\r\n        top: { x: width * 0.5, y: 0 },\r\n        bottom: { x: width * 0.5, y: height },\r\n    };\r\n};\r\nvar calcAnchors = function (anchors, anchorPos) {\r\n    // now prepare this list of anchors to object expected by the `getShortestLine` function\r\n    return anchors.map(function (anchor) {\r\n        var defsOffsets = getAnchorsDefaultOffsets(anchorPos.right - anchorPos.x, anchorPos.bottom - anchorPos.y);\r\n        var _a = defsOffsets[anchor.position], x = _a.x, y = _a.y;\r\n        return {\r\n            x: anchorPos.x + x + anchor.offset.x,\r\n            y: anchorPos.y + y + anchor.offset.y,\r\n            anchor: anchor,\r\n        };\r\n    });\r\n};\r\nexports.calcAnchors = calcAnchors;\r\nif (__nested_webpack_require_17429__.c[__nested_webpack_require_17429__.s] === module) {\r\n    // const res = parseAnchor(['auto'], {\r\n    //   x: 0,\r\n    //   y: 0,\r\n    //   bottom: 10,\r\n    //   right: 20,\r\n    // });\r\n    // console.log(res);\r\n}\r\n\n\n/***/ }),\n\n/***/ \"./src/Xarrow/propTypes.ts\":\n/*!*********************************!*\\\n  !*** ./src/Xarrow/propTypes.ts ***!\n  \\*********************************/\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_18954__) {\n\n\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nvar prop_types_1 = __importDefault(__nested_webpack_require_18954__(/*! prop-types */ \"prop-types\"));\r\nvar constants_1 = __nested_webpack_require_18954__(/*! ../constants */ \"./src/constants.tsx\");\r\nvar pAnchorPositionType = prop_types_1.default.oneOf(constants_1.cAnchorEdge);\r\nvar pAnchorCustomPositionType = prop_types_1.default.exact({\r\n    position: pAnchorPositionType.isRequired,\r\n    offset: prop_types_1.default.exact({\r\n        x: prop_types_1.default.number,\r\n        y: prop_types_1.default.number,\r\n    }).isRequired,\r\n});\r\nvar _pAnchorType = prop_types_1.default.oneOfType([pAnchorPositionType, pAnchorCustomPositionType]);\r\nvar pAnchorType = prop_types_1.default.oneOfType([_pAnchorType, prop_types_1.default.arrayOf(_pAnchorType)]);\r\nvar pRefType = prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.exact({ current: prop_types_1.default.any })]);\r\nvar _pLabelType = prop_types_1.default.oneOfType([prop_types_1.default.element, prop_types_1.default.string]);\r\nvar pLabelsType = prop_types_1.default.exact({\r\n    start: _pLabelType,\r\n    middle: _pLabelType,\r\n    end: _pLabelType,\r\n});\r\nvar pSvgEdgeShapeType = prop_types_1.default.oneOf(Object.keys(constants_1.arrowShapes));\r\n// const pSvgElemType = PT.oneOf(cSvgElems);\r\nvar pSvgElemType = prop_types_1.default.any;\r\nvar pSvgEdgeType = prop_types_1.default.oneOfType([\r\n    pSvgEdgeShapeType,\r\n    prop_types_1.default.exact({\r\n        svgElem: pSvgElemType,\r\n        offsetForward: prop_types_1.default.number,\r\n    }).isRequired,\r\n]);\r\nvar XarrowPropTypes = {\r\n    start: pRefType.isRequired,\r\n    end: pRefType.isRequired,\r\n    startAnchor: pAnchorType,\r\n    endAnchor: pAnchorType,\r\n    labels: prop_types_1.default.oneOfType([_pLabelType, pLabelsType]),\r\n    color: prop_types_1.default.string,\r\n    lineColor: prop_types_1.default.string,\r\n    showHead: prop_types_1.default.bool,\r\n    headColor: prop_types_1.default.string,\r\n    headSize: prop_types_1.default.number,\r\n    tailSize: prop_types_1.default.number,\r\n    tailColor: prop_types_1.default.string,\r\n    strokeWidth: prop_types_1.default.number,\r\n    showTail: prop_types_1.default.bool,\r\n    path: prop_types_1.default.oneOf(constants_1.cPaths),\r\n    showXarrow: prop_types_1.default.bool,\r\n    curveness: prop_types_1.default.number,\r\n    gridBreak: prop_types_1.default.string,\r\n    dashness: prop_types_1.default.oneOfType([prop_types_1.default.bool, prop_types_1.default.object]),\r\n    headShape: pSvgEdgeType,\r\n    tailShape: pSvgEdgeType,\r\n    animateDrawing: prop_types_1.default.oneOfType([prop_types_1.default.bool, prop_types_1.default.number]),\r\n    zIndex: prop_types_1.default.number,\r\n    passProps: prop_types_1.default.object,\r\n    arrowBodyProps: prop_types_1.default.object,\r\n    arrowHeadProps: prop_types_1.default.object,\r\n    arrowTailProps: prop_types_1.default.object,\r\n    SVGcanvasProps: prop_types_1.default.object,\r\n    divContainerProps: prop_types_1.default.object,\r\n    _extendSVGcanvas: prop_types_1.default.number,\r\n    _debug: prop_types_1.default.bool,\r\n    _cpx1Offset: prop_types_1.default.number,\r\n    _cpy1Offset: prop_types_1.default.number,\r\n    _cpx2Offset: prop_types_1.default.number,\r\n    _cpy2Offset: prop_types_1.default.number,\r\n};\r\nexports.default = XarrowPropTypes;\r\n\n\n/***/ }),\n\n/***/ \"./src/Xarrow/useXarrowProps.ts\":\n/*!**************************************!*\\\n  !*** ./src/Xarrow/useXarrowProps.ts ***!\n  \\**************************************/\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_22681__) {\n\n\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nvar react_1 = __importStar(__nested_webpack_require_22681__(/*! react */ \"react\"));\r\nvar utils_1 = __nested_webpack_require_22681__(/*! ./utils */ \"./src/Xarrow/utils/index.ts\");\r\nvar lodash_1 = __importDefault(__nested_webpack_require_22681__(/*! lodash */ \"lodash\"));\r\nvar constants_1 = __nested_webpack_require_22681__(/*! ../constants */ \"./src/constants.tsx\");\r\nvar parseLabels = function (label) {\r\n    var parsedLabel = { start: null, middle: null, end: null };\r\n    if (label) {\r\n        if (typeof label === 'string' || react_1.default.isValidElement(label))\r\n            parsedLabel.middle = label;\r\n        else {\r\n            for (var key in label) {\r\n                parsedLabel[key] = label[key];\r\n            }\r\n        }\r\n    }\r\n    return parsedLabel;\r\n};\r\nvar parseAnchor = function (anchor) {\r\n    // convert to array\r\n    var anchorChoice = Array.isArray(anchor) ? anchor : [anchor];\r\n    //convert to array of objects\r\n    var anchorChoice2 = anchorChoice.map(function (anchorChoice) {\r\n        if (typeof anchorChoice === 'string') {\r\n            return { position: anchorChoice };\r\n        }\r\n        else\r\n            return anchorChoice;\r\n    });\r\n    //remove any invalid anchor names\r\n    anchorChoice2 = anchorChoice2.filter(function (an) { return constants_1.cAnchorEdge.includes(an.position); });\r\n    if (anchorChoice2.length == 0)\r\n        anchorChoice2 = [{ position: 'auto' }];\r\n    //replace any 'auto' with ['left','right','bottom','top']\r\n    var autosAncs = anchorChoice2.filter(function (an) { return an.position === 'auto'; });\r\n    if (autosAncs.length > 0) {\r\n        anchorChoice2 = anchorChoice2.filter(function (an) { return an.position !== 'auto'; });\r\n        anchorChoice2.push.apply(anchorChoice2, autosAncs.flatMap(function (anchorObj) {\r\n            return ['left', 'right', 'top', 'bottom'].map(function (anchorName) {\r\n                return __assign(__assign({}, anchorObj), { position: anchorName });\r\n            });\r\n        }));\r\n    }\r\n    // default values\r\n    var anchorChoice3 = anchorChoice2.map(function (anchorChoice) {\r\n        if (typeof anchorChoice === 'object') {\r\n            var anchorChoiceCustom = anchorChoice;\r\n            if (!anchorChoiceCustom.position)\r\n                anchorChoiceCustom.position = 'auto';\r\n            if (!anchorChoiceCustom.offset)\r\n                anchorChoiceCustom.offset = { x: 0, y: 0 };\r\n            if (!anchorChoiceCustom.offset.y)\r\n                anchorChoiceCustom.offset.y = 0;\r\n            if (!anchorChoiceCustom.offset.x)\r\n                anchorChoiceCustom.offset.x = 0;\r\n            anchorChoiceCustom = anchorChoiceCustom;\r\n            return anchorChoiceCustom;\r\n        }\r\n        else\r\n            return anchorChoice;\r\n    });\r\n    return anchorChoice3;\r\n};\r\nvar parseDashness = function (dashness, props) {\r\n    var dashStroke = 0, dashNone = 0, animDashSpeed, animDirection = 1;\r\n    if (typeof dashness === 'object') {\r\n        dashStroke = dashness.strokeLen || props.strokeWidth * 2;\r\n        dashNone = dashness.strokeLen ? dashness.nonStrokeLen : props.strokeWidth;\r\n        animDashSpeed = dashness.animation ? dashness.animation : null;\r\n    }\r\n    else if (typeof dashness === 'boolean' && dashness) {\r\n        dashStroke = props.strokeWidth * 2;\r\n        dashNone = props.strokeWidth;\r\n        animDashSpeed = null;\r\n    }\r\n    return { strokeLen: dashStroke, nonStrokeLen: dashNone, animation: animDashSpeed, animDirection: animDirection };\r\n};\r\nvar parseEdgeShape = function (svgEdge) {\r\n    if (typeof svgEdge == 'string') {\r\n        if (svgEdge in constants_1.arrowShapes)\r\n            svgEdge = constants_1.arrowShapes[svgEdge];\r\n        else {\r\n            console.warn(\"'\" + svgEdge + \"' is not supported arrow shape. the supported arrow shapes is one of \" + constants_1.cArrowShapes + \".\\n           reverting to default shape.\");\r\n            svgEdge = constants_1.arrowShapes['arrow1'];\r\n        }\r\n    }\r\n    svgEdge = svgEdge;\r\n    if ((svgEdge === null || svgEdge === void 0 ? void 0 : svgEdge.offsetForward) === undefined)\r\n        svgEdge.offsetForward = 0.25;\r\n    if ((svgEdge === null || svgEdge === void 0 ? void 0 : svgEdge.svgElem) === undefined)\r\n        svgEdge.svgElem = 'path';\r\n    // if (svgEdge?.svgProps === undefined) svgEdge.svgProps = arrowShapes.arrow1.svgProps;\r\n    return svgEdge;\r\n};\r\nvar parseGridBreak = function (gridBreak) {\r\n    var resGridBreak = utils_1.xStr2absRelative(gridBreak);\r\n    if (!resGridBreak)\r\n        resGridBreak = { relative: 0.5, abs: 0 };\r\n    return resGridBreak;\r\n};\r\n/**\r\n * should be wrapped with any changed prop that is affecting the points path positioning\r\n * @param propVal\r\n * @param updateRef\r\n */\r\nvar withUpdate = function (propVal, updateRef) {\r\n    if (updateRef)\r\n        updateRef.current = true;\r\n    return propVal;\r\n};\r\nvar noParse = function (userProp) { return userProp; };\r\nvar noParseWithUpdatePos = function (userProp, _, updatePos) { return withUpdate(userProp, updatePos); };\r\nvar parseNumWithUpdatePos = function (userProp, _, updatePos) { return withUpdate(Number(userProp), updatePos); };\r\nvar parseNum = function (userProp) { return Number(userProp); };\r\nvar parsePropsFuncs = {\r\n    start: function (userProp) { return utils_1.getElementByPropGiven(userProp); },\r\n    end: function (userProp) { return utils_1.getElementByPropGiven(userProp); },\r\n    startAnchor: function (userProp, _, updatePos) { return withUpdate(parseAnchor(userProp), updatePos); },\r\n    endAnchor: function (userProp, _, updatePos) { return withUpdate(parseAnchor(userProp), updatePos); },\r\n    labels: function (userProp) { return parseLabels(userProp); },\r\n    color: noParse,\r\n    lineColor: function (userProp, propsRefs) { return userProp || propsRefs.color; },\r\n    headColor: function (userProp, propsRefs) { return userProp || propsRefs.color; },\r\n    tailColor: function (userProp, propsRefs) { return userProp || propsRefs.color; },\r\n    strokeWidth: parseNumWithUpdatePos,\r\n    showHead: noParseWithUpdatePos,\r\n    headSize: parseNumWithUpdatePos,\r\n    showTail: noParseWithUpdatePos,\r\n    tailSize: parseNumWithUpdatePos,\r\n    path: noParseWithUpdatePos,\r\n    curveness: parseNumWithUpdatePos,\r\n    gridBreak: function (userProp, _, updatePos) { return withUpdate(parseGridBreak(userProp), updatePos); },\r\n    // // gridRadius = strokeWidth * 2, //todo\r\n    dashness: function (userProp, propsRefs) { return parseDashness(userProp, propsRefs); },\r\n    headShape: function (userProp) { return parseEdgeShape(userProp); },\r\n    tailShape: function (userProp) { return parseEdgeShape(userProp); },\r\n    showXarrow: noParse,\r\n    animateDrawing: noParse,\r\n    zIndex: parseNum,\r\n    passProps: noParse,\r\n    arrowBodyProps: noParseWithUpdatePos,\r\n    arrowHeadProps: noParseWithUpdatePos,\r\n    arrowTailProps: noParseWithUpdatePos,\r\n    SVGcanvasProps: noParseWithUpdatePos,\r\n    divContainerProps: noParseWithUpdatePos,\r\n    divContainerStyle: noParseWithUpdatePos,\r\n    SVGcanvasStyle: noParseWithUpdatePos,\r\n    _extendSVGcanvas: noParseWithUpdatePos,\r\n    _debug: noParseWithUpdatePos,\r\n    _cpx1Offset: noParseWithUpdatePos,\r\n    _cpy1Offset: noParseWithUpdatePos,\r\n    _cpx2Offset: noParseWithUpdatePos,\r\n    _cpy2Offset: noParseWithUpdatePos,\r\n};\r\n//build dependencies\r\nvar propsDeps = {};\r\n//each prop depends on himself\r\nfor (var propName in parsePropsFuncs) {\r\n    propsDeps[propName] = [propName];\r\n}\r\n// 'lineColor', 'headColor', 'tailColor' props also depends on 'color' prop\r\nfor (var _i = 0, _a = ['lineColor', 'headColor', 'tailColor']; _i < _a.length; _i++) {\r\n    var propName = _a[_i];\r\n    propsDeps[propName].push('color');\r\n}\r\nvar parseGivenProps = function (props, propsRef) {\r\n    var _a;\r\n    for (var _i = 0, _b = Object.entries(props); _i < _b.length; _i++) {\r\n        var _c = _b[_i], name_1 = _c[0], val = _c[1];\r\n        propsRef[name_1] = (_a = parsePropsFuncs === null || parsePropsFuncs === void 0 ? void 0 : parsePropsFuncs[name_1]) === null || _a === void 0 ? void 0 : _a.call(parsePropsFuncs, val, propsRef);\r\n    }\r\n    return propsRef;\r\n};\r\nvar defaultProps = {\r\n    start: null,\r\n    end: null,\r\n    startAnchor: 'auto',\r\n    endAnchor: 'auto',\r\n    labels: null,\r\n    color: 'CornflowerBlue',\r\n    lineColor: null,\r\n    headColor: null,\r\n    tailColor: null,\r\n    strokeWidth: 4,\r\n    showHead: true,\r\n    headSize: 6,\r\n    showTail: false,\r\n    tailSize: 6,\r\n    path: 'smooth',\r\n    curveness: 0.8,\r\n    gridBreak: '50%',\r\n    // gridRadius : strokeWidth * 2, //todo\r\n    dashness: false,\r\n    headShape: 'arrow1',\r\n    tailShape: 'arrow1',\r\n    showXarrow: true,\r\n    animateDrawing: false,\r\n    zIndex: 0,\r\n    passProps: {},\r\n    arrowBodyProps: {},\r\n    arrowHeadProps: {},\r\n    arrowTailProps: {},\r\n    SVGcanvasProps: {},\r\n    divContainerProps: {},\r\n    divContainerStyle: {},\r\n    SVGcanvasStyle: {},\r\n    _extendSVGcanvas: 0,\r\n    _debug: false,\r\n    _cpx1Offset: 0,\r\n    _cpy1Offset: 0,\r\n    _cpx2Offset: 0,\r\n    _cpy2Offset: 0,\r\n};\r\nvar initialParsedProps = {};\r\ninitialParsedProps = parseGivenProps(defaultProps, initialParsedProps);\r\nvar initialValVars = {\r\n    startPos: { x: 0, y: 0, right: 0, bottom: 0 },\r\n    endPos: { x: 0, y: 0, right: 0, bottom: 0 },\r\n};\r\n// const parseAllProps = () => parseGivenProps(defaultProps, initialParsedProps);\r\nfunction deepCompareEquals(a, b) {\r\n    return lodash_1.default.isEqual(a, b);\r\n}\r\nfunction useDeepCompareMemoize(value) {\r\n    var ref = react_1.useRef();\r\n    // it can be done by using useMemo as well\r\n    // but useRef is rather cleaner and easier\r\n    if (!deepCompareEquals(value, ref.current)) {\r\n        ref.current = value;\r\n    }\r\n    return ref.current;\r\n}\r\nfunction useDeepCompareEffect(callback, dependencies) {\r\n    react_1.useLayoutEffect(callback, dependencies.map(useDeepCompareMemoize));\r\n}\r\n/**\r\n * smart hook that provides parsed props to Xarrow and will trigger rerender whenever given prop is changed.\r\n */\r\nvar useXarrowProps = function (userProps, refs) {\r\n    var _a = react_1.useState(initialParsedProps), propsRefs = _a[0], setPropsRefs = _a[1];\r\n    var shouldUpdatePosition = react_1.useRef(false);\r\n    // const _propsRefs = useRef(initialParsedProps);\r\n    // const propsRefs = _propsRefs.current;\r\n    propsRefs['shouldUpdatePosition'] = shouldUpdatePosition;\r\n    var curProps = __assign(__assign({}, defaultProps), userProps);\r\n    var _loop_1 = function (propName) {\r\n        react_1.useLayoutEffect(function () {\r\n            var _a;\r\n            propsRefs[propName] = (_a = parsePropsFuncs === null || parsePropsFuncs === void 0 ? void 0 : parsePropsFuncs[propName]) === null || _a === void 0 ? void 0 : _a.call(parsePropsFuncs, curProps[propName], propsRefs, shouldUpdatePosition);\r\n            // console.log('prop update:', propName, 'with value', propsRefs[propName]);\r\n            setPropsRefs(__assign({}, propsRefs));\r\n        }, propsDeps[propName].map(function (name) { return userProps[name]; }));\r\n    };\r\n    // react states the number of hooks per render must stay constant,\r\n    // this is ok we are using these hooks in a loop, because the number of props in defaultProps is constant,\r\n    // so the number of hook we will fire each render will always be the same.\r\n    // update the value of the ref that represents the corresponding prop\r\n    // for example: if given 'start' prop would change call getElementByPropGiven(props.start) and save value into propsRefs.start.current\r\n    // why to save refs to props parsed values? some of the props require relatively expensive computations(like 'start' and 'startAnchor').\r\n    // this will always run in the same order and THAT'S WAY ITS LEGAL\r\n    for (var propName in defaultProps) {\r\n        _loop_1(propName);\r\n    }\r\n    // rerender whenever position of start element or end element changes\r\n    var _b = react_1.useState(initialValVars), valVars = _b[0], setValVars = _b[1];\r\n    var startPos = utils_1.getElemPos(propsRefs.start);\r\n    useDeepCompareEffect(function () {\r\n        valVars.startPos = startPos;\r\n        shouldUpdatePosition.current = true;\r\n        setValVars(__assign({}, valVars));\r\n        // console.log('start update pos', startPos);\r\n    }, [startPos]);\r\n    var endPos = utils_1.getElemPos(propsRefs.end);\r\n    useDeepCompareEffect(function () {\r\n        valVars.endPos = endPos;\r\n        shouldUpdatePosition.current = true;\r\n        setValVars(__assign({}, valVars));\r\n        // console.log('end update pos', endPos);\r\n    }, [endPos]);\r\n    react_1.useLayoutEffect(function () {\r\n        // console.log('svg shape changed!');\r\n        shouldUpdatePosition.current = true;\r\n        setValVars(__assign({}, valVars));\r\n    }, [propsRefs.headShape.svgElem, propsRefs.tailShape.svgElem]);\r\n    return [propsRefs, valVars];\r\n};\r\nexports.default = useXarrowProps;\r\n\n\n/***/ }),\n\n/***/ \"./src/Xarrow/utils/GetPosition.tsx\":\n/*!******************************************!*\\\n  !*** ./src/Xarrow/utils/GetPosition.tsx ***!\n  \\******************************************/\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_37193__) {\n\n\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.getPosition = void 0;\r\nvar anchors_1 = __nested_webpack_require_37193__(/*! ../anchors */ \"./src/Xarrow/anchors.ts\");\r\nvar index_1 = __nested_webpack_require_37193__(/*! ./index */ \"./src/Xarrow/utils/index.ts\");\r\nvar lodash_1 = __importDefault(__nested_webpack_require_37193__(/*! lodash */ \"lodash\"));\r\nvar constants_1 = __nested_webpack_require_37193__(/*! ../../constants */ \"./src/constants.tsx\");\r\nvar buzzier_1 = __nested_webpack_require_37193__(/*! ./buzzier */ \"./src/Xarrow/utils/buzzier.js\");\r\n/**\r\n * The Main logic of path calculation for the arrow.\r\n * calculate new path, adjusting canvas, and set state based on given properties.\r\n * */\r\nvar getPosition = function (xProps, mainRef) {\r\n    var _a, _b;\r\n    var _c, _d;\r\n    var propsRefs = xProps[0], valVars = xProps[1];\r\n    var startAnchor = propsRefs.startAnchor, endAnchor = propsRefs.endAnchor, strokeWidth = propsRefs.strokeWidth, showHead = propsRefs.showHead, headSize = propsRefs.headSize, showTail = propsRefs.showTail, tailSize = propsRefs.tailSize, path = propsRefs.path, curveness = propsRefs.curveness, gridBreak = propsRefs.gridBreak, headShape = propsRefs.headShape, tailShape = propsRefs.tailShape, _extendSVGcanvas = propsRefs._extendSVGcanvas, _cpx1Offset = propsRefs._cpx1Offset, _cpy1Offset = propsRefs._cpy1Offset, _cpx2Offset = propsRefs._cpx2Offset, _cpy2Offset = propsRefs._cpy2Offset;\r\n    var startPos = valVars.startPos, endPos = valVars.endPos;\r\n    var _e = mainRef.current, svgRef = _e.svgRef, lineRef = _e.lineRef;\r\n    var headOrient = 0;\r\n    var tailOrient = 0;\r\n    // convert startAnchor and endAnchor to list of objects represents allowed anchors.\r\n    var startPoints = anchors_1.calcAnchors(startAnchor, startPos);\r\n    var endPoints = anchors_1.calcAnchors(endAnchor, endPos);\r\n    // choose the smallest path for 2 points from these possibilities.\r\n    var _f = index_1.getShortestLine(startPoints, endPoints), chosenStart = _f.chosenStart, chosenEnd = _f.chosenEnd;\r\n    var startAnchorPosition = chosenStart.anchor.position, endAnchorPosition = chosenEnd.anchor.position;\r\n    var startPoint = lodash_1.default.pick(chosenStart, ['x', 'y']), endPoint = lodash_1.default.pick(chosenEnd, ['x', 'y']);\r\n    var mainDivPos = index_1.getSvgPos(svgRef);\r\n    var cx0 = Math.min(startPoint.x, endPoint.x) - mainDivPos.x;\r\n    var cy0 = Math.min(startPoint.y, endPoint.y) - mainDivPos.y;\r\n    var dx = endPoint.x - startPoint.x;\r\n    var dy = endPoint.y - startPoint.y;\r\n    var absDx = Math.abs(endPoint.x - startPoint.x);\r\n    var absDy = Math.abs(endPoint.y - startPoint.y);\r\n    var xSign = dx > 0 ? 1 : -1;\r\n    var ySign = dy > 0 ? 1 : -1;\r\n    var _g = [headShape.offsetForward, tailShape.offsetForward], headOffset = _g[0], tailOffset = _g[1];\r\n    var fHeadSize = headSize * strokeWidth; //factored head size\r\n    var fTailSize = tailSize * strokeWidth; //factored head size\r\n    // const { current: _headBox } = headBox;\r\n    var xHeadOffset = 0;\r\n    var yHeadOffset = 0;\r\n    var xTailOffset = 0;\r\n    var yTailOffset = 0;\r\n    var _headOffset = fHeadSize * headOffset;\r\n    var _tailOffset = fTailSize * tailOffset;\r\n    var cu = Number(curveness);\r\n    // gridRadius = Number(gridRadius);\r\n    if (!constants_1.cPaths.includes(path))\r\n        path = 'smooth';\r\n    if (path === 'straight') {\r\n        cu = 0;\r\n        path = 'smooth';\r\n    }\r\n    var biggerSide = headSize > tailSize ? headSize : tailSize;\r\n    var _calc = strokeWidth + (strokeWidth * biggerSide) / 2;\r\n    var excRight = _calc;\r\n    var excLeft = _calc;\r\n    var excUp = _calc;\r\n    var excDown = _calc;\r\n    excLeft += Number(_extendSVGcanvas);\r\n    excRight += Number(_extendSVGcanvas);\r\n    excUp += Number(_extendSVGcanvas);\r\n    excDown += Number(_extendSVGcanvas);\r\n    ////////////////////////////////////\r\n    // arrow point to point calculations\r\n    var x1 = 0, x2 = absDx, y1 = 0, y2 = absDy;\r\n    if (dx < 0)\r\n        _a = [x2, x1], x1 = _a[0], x2 = _a[1];\r\n    if (dy < 0)\r\n        _b = [y2, y1], y1 = _b[0], y2 = _b[1];\r\n    ////////////////////////////////////\r\n    // arrow curviness and arrowhead placement calculations\r\n    if (cu === 0) {\r\n        // in case of straight path\r\n        var headAngel = Math.atan(absDy / absDx);\r\n        if (showHead) {\r\n            x2 -= fHeadSize * (1 - headOffset) * xSign * Math.cos(headAngel);\r\n            y2 -= fHeadSize * (1 - headOffset) * ySign * Math.sin(headAngel);\r\n            headAngel *= ySign;\r\n            if (xSign < 0)\r\n                headAngel = (Math.PI - headAngel * xSign) * xSign;\r\n            xHeadOffset = Math.cos(headAngel) * _headOffset - (Math.sin(headAngel) * fHeadSize) / 2;\r\n            yHeadOffset = (Math.cos(headAngel) * fHeadSize) / 2 + Math.sin(headAngel) * _headOffset;\r\n            headOrient = (headAngel * 180) / Math.PI;\r\n        }\r\n        var tailAngel = Math.atan(absDy / absDx);\r\n        if (showTail) {\r\n            x1 += fTailSize * (1 - tailOffset) * xSign * Math.cos(tailAngel);\r\n            y1 += fTailSize * (1 - tailOffset) * ySign * Math.sin(tailAngel);\r\n            tailAngel *= -ySign;\r\n            if (xSign > 0)\r\n                tailAngel = (Math.PI - tailAngel * xSign) * xSign;\r\n            xTailOffset = Math.cos(tailAngel) * _tailOffset - (Math.sin(tailAngel) * fTailSize) / 2;\r\n            yTailOffset = (Math.cos(tailAngel) * fTailSize) / 2 + Math.sin(tailAngel) * _tailOffset;\r\n            tailOrient = (tailAngel * 180) / Math.PI;\r\n        }\r\n    }\r\n    else {\r\n        // in case of smooth path\r\n        if (endAnchorPosition === 'middle') {\r\n            // in case a middle anchor is chosen for endAnchor choose from which side to attach to the middle of the element\r\n            if (absDx > absDy) {\r\n                endAnchorPosition = xSign ? 'left' : 'right';\r\n            }\r\n            else {\r\n                endAnchorPosition = ySign ? 'top' : 'bottom';\r\n            }\r\n        }\r\n        if (showHead) {\r\n            if (['left', 'right'].includes(endAnchorPosition)) {\r\n                xHeadOffset += _headOffset * xSign;\r\n                x2 -= fHeadSize * (1 - headOffset) * xSign; //same!\r\n                yHeadOffset += (fHeadSize * xSign) / 2;\r\n                if (endAnchorPosition === 'left') {\r\n                    headOrient = 0;\r\n                    if (xSign < 0)\r\n                        headOrient += 180;\r\n                }\r\n                else {\r\n                    headOrient = 180;\r\n                    if (xSign > 0)\r\n                        headOrient += 180;\r\n                }\r\n            }\r\n            else if (['top', 'bottom'].includes(endAnchorPosition)) {\r\n                xHeadOffset += (fHeadSize * -ySign) / 2;\r\n                yHeadOffset += _headOffset * ySign;\r\n                y2 -= fHeadSize * ySign - yHeadOffset;\r\n                if (endAnchorPosition === 'top') {\r\n                    headOrient = 270;\r\n                    if (ySign > 0)\r\n                        headOrient += 180;\r\n                }\r\n                else {\r\n                    headOrient = 90;\r\n                    if (ySign < 0)\r\n                        headOrient += 180;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (showTail && cu !== 0) {\r\n        if (['left', 'right'].includes(startAnchorPosition)) {\r\n            xTailOffset += _tailOffset * -xSign;\r\n            x1 += fTailSize * xSign + xTailOffset;\r\n            yTailOffset += -(fTailSize * xSign) / 2;\r\n            if (startAnchorPosition === 'left') {\r\n                tailOrient = 180;\r\n                if (xSign < 0)\r\n                    tailOrient += 180;\r\n            }\r\n            else {\r\n                tailOrient = 0;\r\n                if (xSign > 0)\r\n                    tailOrient += 180;\r\n            }\r\n        }\r\n        else if (['top', 'bottom'].includes(startAnchorPosition)) {\r\n            yTailOffset += _tailOffset * -ySign;\r\n            y1 += fTailSize * ySign + yTailOffset;\r\n            xTailOffset += (fTailSize * ySign) / 2;\r\n            if (startAnchorPosition === 'top') {\r\n                tailOrient = 90;\r\n                if (ySign > 0)\r\n                    tailOrient += 180;\r\n            }\r\n            else {\r\n                tailOrient = 270;\r\n                if (ySign < 0)\r\n                    tailOrient += 180;\r\n            }\r\n        }\r\n    }\r\n    var arrowHeadOffset = { x: xHeadOffset, y: yHeadOffset };\r\n    var arrowTailOffset = { x: xTailOffset, y: yTailOffset };\r\n    var cpx1 = x1, cpy1 = y1, cpx2 = x2, cpy2 = y2;\r\n    var curvesPossibilities = {};\r\n    if (path === 'smooth')\r\n        curvesPossibilities = {\r\n            hh: function () {\r\n                //horizontal - from right to left or the opposite\r\n                cpx1 += absDx * cu * xSign;\r\n                cpx2 -= absDx * cu * xSign;\r\n            },\r\n            vv: function () {\r\n                //vertical - from top to bottom or opposite\r\n                cpy1 += absDy * cu * ySign;\r\n                cpy2 -= absDy * cu * ySign;\r\n            },\r\n            hv: function () {\r\n                // start horizontally then vertically\r\n                // from v side to h side\r\n                cpx1 += absDx * cu * xSign;\r\n                cpy2 -= absDy * cu * ySign;\r\n            },\r\n            vh: function () {\r\n                // start vertically then horizontally\r\n                // from h side to v side\r\n                cpy1 += absDy * cu * ySign;\r\n                cpx2 -= absDx * cu * xSign;\r\n            },\r\n        };\r\n    else if (path === 'grid') {\r\n        curvesPossibilities = {\r\n            hh: function () {\r\n                cpx1 += (absDx * gridBreak.relative + gridBreak.abs) * xSign;\r\n                cpx2 -= (absDx * (1 - gridBreak.relative) - gridBreak.abs) * xSign;\r\n                if (showHead) {\r\n                    cpx1 -= ((fHeadSize * (1 - headOffset)) / 2) * xSign;\r\n                    cpx2 += ((fHeadSize * (1 - headOffset)) / 2) * xSign;\r\n                }\r\n                if (showTail) {\r\n                    cpx1 -= ((fTailSize * (1 - tailOffset)) / 2) * xSign;\r\n                    cpx2 += ((fTailSize * (1 - tailOffset)) / 2) * xSign;\r\n                }\r\n            },\r\n            vv: function () {\r\n                cpy1 += (absDy * gridBreak.relative + gridBreak.abs) * ySign;\r\n                cpy2 -= (absDy * (1 - gridBreak.relative) - gridBreak.abs) * ySign;\r\n                if (showHead) {\r\n                    cpy1 -= ((fHeadSize * (1 - headOffset)) / 2) * ySign;\r\n                    cpy2 += ((fHeadSize * (1 - headOffset)) / 2) * ySign;\r\n                }\r\n                if (showTail) {\r\n                    cpy1 -= ((fTailSize * (1 - tailOffset)) / 2) * ySign;\r\n                    cpy2 += ((fTailSize * (1 - tailOffset)) / 2) * ySign;\r\n                }\r\n            },\r\n            hv: function () {\r\n                cpx1 = x2;\r\n            },\r\n            vh: function () {\r\n                cpy1 = y2;\r\n            },\r\n        };\r\n    }\r\n    // smart select best curve for the current anchors\r\n    var selectedCurviness = '';\r\n    if (['left', 'right'].includes(startAnchorPosition))\r\n        selectedCurviness += 'h';\r\n    else if (['bottom', 'top'].includes(startAnchorPosition))\r\n        selectedCurviness += 'v';\r\n    else if (startAnchorPosition === 'middle')\r\n        selectedCurviness += 'm';\r\n    if (['left', 'right'].includes(endAnchorPosition))\r\n        selectedCurviness += 'h';\r\n    else if (['bottom', 'top'].includes(endAnchorPosition))\r\n        selectedCurviness += 'v';\r\n    else if (endAnchorPosition === 'middle')\r\n        selectedCurviness += 'm';\r\n    if (absDx > absDy)\r\n        selectedCurviness = selectedCurviness.replace(/m/g, 'h');\r\n    else\r\n        selectedCurviness = selectedCurviness.replace(/m/g, 'v');\r\n    curvesPossibilities[selectedCurviness]();\r\n    cpx1 += _cpx1Offset;\r\n    cpy1 += _cpy1Offset;\r\n    cpx2 += _cpx2Offset;\r\n    cpy2 += _cpy2Offset;\r\n    ////////////////////////////////////\r\n    // canvas smart size adjustments\r\n    var _h = buzzier_1.buzzierMinSols(x1, cpx1, cpx2, x2), xSol1 = _h[0], xSol2 = _h[1];\r\n    var _j = buzzier_1.buzzierMinSols(y1, cpy1, cpy2, y2), ySol1 = _j[0], ySol2 = _j[1];\r\n    if (xSol1 < 0)\r\n        excLeft += -xSol1;\r\n    if (xSol2 > absDx)\r\n        excRight += xSol2 - absDx;\r\n    if (ySol1 < 0)\r\n        excUp += -ySol1;\r\n    if (ySol2 > absDy)\r\n        excDown += ySol2 - absDy;\r\n    if (path === 'grid') {\r\n        excLeft += _calc;\r\n        excRight += _calc;\r\n        excUp += _calc;\r\n        excDown += _calc;\r\n    }\r\n    x1 += excLeft;\r\n    x2 += excLeft;\r\n    y1 += excUp;\r\n    y2 += excUp;\r\n    cpx1 += excLeft;\r\n    cpx2 += excLeft;\r\n    cpy1 += excUp;\r\n    cpy2 += excUp;\r\n    var cw = absDx + excLeft + excRight, ch = absDy + excUp + excDown;\r\n    cx0 -= excLeft;\r\n    cy0 -= excUp;\r\n    //labels\r\n    var bzx = buzzier_1.bzFunction(x1, cpx1, cpx2, x2);\r\n    var bzy = buzzier_1.bzFunction(y1, cpy1, cpy2, y2);\r\n    var labelStartPos = { x: bzx(0.01), y: bzy(0.01) };\r\n    var labelMiddlePos = { x: bzx(0.5), y: bzy(0.5) };\r\n    var labelEndPos = { x: bzx(0.99), y: bzy(0.99) };\r\n    var arrowPath;\r\n    if (path === 'grid') {\r\n        // todo: support gridRadius\r\n        //  arrowPath = `M ${x1} ${y1} L  ${cpx1 - 10} ${cpy1} a10,10 0 0 1 10,10\r\n        // L ${cpx2} ${cpy2 - 10} a10,10 0 0 0 10,10 L  ${x2} ${y2}`;\r\n        arrowPath = \"M \" + x1 + \" \" + y1 + \" L  \" + cpx1 + \" \" + cpy1 + \" L \" + cpx2 + \" \" + cpy2 + \" \" + x2 + \" \" + y2;\r\n    }\r\n    else if (path === 'smooth')\r\n        arrowPath = \"M \" + x1 + \" \" + y1 + \" C \" + cpx1 + \" \" + cpy1 + \", \" + cpx2 + \" \" + cpy2 + \", \" + x2 + \" \" + y2;\r\n    return {\r\n        cx0: cx0,\r\n        cy0: cy0,\r\n        x1: x1,\r\n        x2: x2,\r\n        y1: y1,\r\n        y2: y2,\r\n        cw: cw,\r\n        ch: ch,\r\n        cpx1: cpx1,\r\n        cpy1: cpy1,\r\n        cpx2: cpx2,\r\n        cpy2: cpy2,\r\n        dx: dx,\r\n        dy: dy,\r\n        absDx: absDx,\r\n        absDy: absDy,\r\n        headOrient: headOrient,\r\n        tailOrient: tailOrient,\r\n        labelStartPos: labelStartPos,\r\n        labelMiddlePos: labelMiddlePos,\r\n        labelEndPos: labelEndPos,\r\n        excLeft: excLeft,\r\n        excRight: excRight,\r\n        excUp: excUp,\r\n        excDown: excDown,\r\n        headOffset: _headOffset,\r\n        arrowHeadOffset: arrowHeadOffset,\r\n        arrowTailOffset: arrowTailOffset,\r\n        startPoints: startPoints,\r\n        endPoints: endPoints,\r\n        mainDivPos: mainDivPos,\r\n        xSign: xSign,\r\n        ySign: ySign,\r\n        lineLength: (_d = (_c = lineRef.current) === null || _c === void 0 ? void 0 : _c.getTotalLength()) !== null && _d !== void 0 ? _d : 0,\r\n        fHeadSize: fHeadSize,\r\n        fTailSize: fTailSize,\r\n        arrowPath: arrowPath,\r\n    };\r\n};\r\nexports.getPosition = getPosition;\r\n\n\n/***/ }),\n\n/***/ \"./src/Xarrow/utils/index.ts\":\n/*!***********************************!*\\\n  !*** ./src/Xarrow/utils/index.ts ***!\n  \\***********************************/\n/***/ (function(__unused_webpack_module, exports) {\n\n\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.getSvgPos = exports.getElemPos = exports.getShortestLine = exports.xStr2absRelative = exports.factorDpathStr = exports.getElementByPropGiven = void 0;\r\nvar getElementByPropGiven = function (ref) {\r\n    var myRef;\r\n    if (typeof ref === 'string') {\r\n        // myRef = document.getElementById(ref);\r\n        myRef = document.getElementById(ref);\r\n    }\r\n    else\r\n        myRef = ref === null || ref === void 0 ? void 0 : ref.current;\r\n    return myRef;\r\n};\r\nexports.getElementByPropGiven = getElementByPropGiven;\r\n// receives string representing a d path and factoring only the numbers\r\nvar factorDpathStr = function (d, factor) {\r\n    var l = d.split(/(\\d+(?:\\.\\d+)?)/);\r\n    l = l.map(function (s) {\r\n        if (Number(s))\r\n            return (Number(s) * factor).toString();\r\n        else\r\n            return s;\r\n    });\r\n    return l.join('');\r\n};\r\nexports.factorDpathStr = factorDpathStr;\r\n// return relative,abs\r\nvar xStr2absRelative = function (str) {\r\n    if (typeof str !== 'string')\r\n        return { abs: 0, relative: 0.5 };\r\n    var sp = str.split('%');\r\n    var absLen = 0, percentLen = 0;\r\n    if (sp.length == 1) {\r\n        var p = parseFloat(sp[0]);\r\n        if (!isNaN(p)) {\r\n            absLen = p;\r\n            return { abs: absLen, relative: 0 };\r\n        }\r\n    }\r\n    else if (sp.length == 2) {\r\n        var _a = [parseFloat(sp[0]), parseFloat(sp[1])], p1 = _a[0], p2 = _a[1];\r\n        if (!isNaN(p1))\r\n            percentLen = p1 / 100;\r\n        if (!isNaN(p2))\r\n            absLen = p2;\r\n        if (!isNaN(p1) || !isNaN(p2))\r\n            return { abs: absLen, relative: percentLen };\r\n    }\r\n};\r\nexports.xStr2absRelative = xStr2absRelative;\r\nvar dist = function (p1, p2) {\r\n    //length of line\r\n    return Math.sqrt(Math.pow((p1.x - p2.x), 2) + Math.pow((p1.y - p2.y), 2));\r\n};\r\nvar getShortestLine = function (sPoints, ePoints) {\r\n    // closes tPair Of Points which feet to the specified anchors\r\n    var minDist = Infinity, d = Infinity;\r\n    var closestPair;\r\n    sPoints.forEach(function (sp) {\r\n        ePoints.forEach(function (ep) {\r\n            d = dist(sp, ep);\r\n            if (d < minDist) {\r\n                minDist = d;\r\n                closestPair = { chosenStart: sp, chosenEnd: ep };\r\n            }\r\n        });\r\n    });\r\n    return closestPair;\r\n};\r\nexports.getShortestLine = getShortestLine;\r\nvar getElemPos = function (elem) {\r\n    if (!elem)\r\n        return { x: 0, y: 0, right: 0, bottom: 0 };\r\n    var pos = elem.getBoundingClientRect();\r\n    return {\r\n        x: pos.left,\r\n        y: pos.top,\r\n        right: pos.right,\r\n        bottom: pos.bottom,\r\n    };\r\n};\r\nexports.getElemPos = getElemPos;\r\nvar getSvgPos = function (svgRef) {\r\n    if (!svgRef.current)\r\n        return { x: 0, y: 0 };\r\n    var _a = svgRef.current.getBoundingClientRect(), xarrowElemX = _a.left, xarrowElemY = _a.top;\r\n    var xarrowStyle = getComputedStyle(svgRef.current);\r\n    var xarrowStyleLeft = Number(xarrowStyle.left.slice(0, -2));\r\n    var xarrowStyleTop = Number(xarrowStyle.top.slice(0, -2));\r\n    return {\r\n        x: xarrowElemX - xarrowStyleLeft,\r\n        y: xarrowElemY - xarrowStyleTop,\r\n    };\r\n};\r\nexports.getSvgPos = getSvgPos;\r\n\n\n/***/ }),\n\n/***/ \"./src/Xwrapper.tsx\":\n/*!**************************!*\\\n  !*** ./src/Xwrapper.tsx ***!\n  \\**************************/\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_55749__) {\n\n\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.XarrowContext = exports.XelemContext = void 0;\r\nvar react_1 = __importStar(__nested_webpack_require_55749__(/*! react */ \"react\"));\r\nexports.XelemContext = react_1.default.createContext(null);\r\nexports.XarrowContext = react_1.default.createContext(null);\r\nvar updateRef = {};\r\nvar updateRefCount = 0;\r\nvar log = console.log;\r\nvar XarrowProvider = function (_a) {\r\n    var children = _a.children, instanceCount = _a.instanceCount;\r\n    var _b = react_1.useState({}), setRender = _b[1];\r\n    var updateXarrow = function () { return setRender({}); };\r\n    react_1.useEffect(function () {\r\n        instanceCount.current = updateRefCount; // so this instance would know what is id\r\n        updateRef[instanceCount.current] = updateXarrow;\r\n    }, []);\r\n    // log('XarrowProvider', updateRefCount);\r\n    return react_1.default.createElement(exports.XarrowContext.Provider, { value: updateXarrow }, children);\r\n};\r\nvar XelemProvider = function (_a) {\r\n    var children = _a.children, instanceCount = _a.instanceCount;\r\n    return react_1.default.createElement(exports.XelemContext.Provider, { value: updateRef[instanceCount.current] }, children);\r\n};\r\nvar Xwrapper = function (_a) {\r\n    var children = _a.children;\r\n    var instanceCount = react_1.useRef(updateRefCount);\r\n    var _b = react_1.useState({}), setRender = _b[1];\r\n    react_1.useEffect(function () {\r\n        updateRefCount++;\r\n        setRender({});\r\n        return function () {\r\n            delete updateRef[instanceCount.current];\r\n        };\r\n    }, []);\r\n    return (react_1.default.createElement(XelemProvider, { instanceCount: instanceCount },\r\n        react_1.default.createElement(XarrowProvider, { instanceCount: instanceCount }, children)));\r\n};\r\nexports.default = Xwrapper;\r\n\n\n/***/ }),\n\n/***/ \"./src/constants.tsx\":\n/*!***************************!*\\\n  !*** ./src/constants.tsx ***!\n  \\***************************/\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_58651__) {\n\n\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.cArrowShapes = exports.arrowShapes = exports.cSvgElems = exports.cPaths = exports.cAnchorEdge = void 0;\r\n// constants used for typescript and proptypes definitions\r\nvar react_1 = __importDefault(__nested_webpack_require_58651__(/*! react */ \"react\"));\r\nexports.cAnchorEdge = ['middle', 'left', 'right', 'top', 'bottom', 'auto'];\r\nexports.cPaths = ['smooth', 'grid', 'straight'];\r\nexports.cSvgElems = ['circle', 'ellipse', 'line', 'path', 'polygon', 'polyline', 'rect'];\r\n//default arrows svgs\r\nexports.arrowShapes = {\r\n    arrow1: { svgElem: react_1.default.createElement(\"path\", { d: \"M 0 0 L 1 0.5 L 0 1 L 0.25 0.5 z\" }), offsetForward: 0.25 },\r\n    heart: {\r\n        svgElem: (react_1.default.createElement(\"path\", { d: \"M 0,0.25 A 0.125,0.125 0,0,1 0.5,0.25 A 0.125,0.125 0,0,1 1,0.25 Q 1,0.625 0.5,1 Q 0,0.625 0,0.25 z\" })),\r\n        offsetForward: 0.1,\r\n    },\r\n    circle: {\r\n        svgElem: react_1.default.createElement(\"circle\", { r: 0.5, cx: 0.5, cy: 0.5 }),\r\n        offsetForward: 0,\r\n    },\r\n};\r\nexports.cArrowShapes = Object.keys(exports.arrowShapes);\r\n\n\n/***/ }),\n\n/***/ \"./src/index.tsx\":\n/*!***********************!*\\\n  !*** ./src/index.tsx ***!\n  \\***********************/\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_60123__) {\n\n\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.useXarrow = exports.Xwrapper = exports.default = void 0;\r\nvar Xarrow_1 = __nested_webpack_require_60123__(/*! ./Xarrow/Xarrow */ \"./src/Xarrow/Xarrow.tsx\");\r\nObject.defineProperty(exports, \"default\", ({ enumerable: true, get: function () { return __importDefault(Xarrow_1).default; } }));\r\n__exportStar(__nested_webpack_require_60123__(/*! ./types */ \"./src/types.ts\"), exports);\r\n__exportStar(__nested_webpack_require_60123__(/*! ./constants */ \"./src/constants.tsx\"), exports);\r\nvar Xwrapper_1 = __nested_webpack_require_60123__(/*! ./Xwrapper */ \"./src/Xwrapper.tsx\");\r\nObject.defineProperty(exports, \"Xwrapper\", ({ enumerable: true, get: function () { return __importDefault(Xwrapper_1).default; } }));\r\nvar useXarrow_1 = __nested_webpack_require_60123__(/*! ./useXarrow */ \"./src/useXarrow.tsx\");\r\nObject.defineProperty(exports, \"useXarrow\", ({ enumerable: true, get: function () { return __importDefault(useXarrow_1).default; } }));\r\n\n\n/***/ }),\n\n/***/ \"./src/types.ts\":\n/*!**********************!*\\\n  !*** ./src/types.ts ***!\n  \\**********************/\n/***/ (function(__unused_webpack_module, exports) {\n\n\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n\n\n/***/ }),\n\n/***/ \"./src/useXarrow.tsx\":\n/*!***************************!*\\\n  !*** ./src/useXarrow.tsx ***!\n  \\***************************/\n/***/ (function(__unused_webpack_module, exports, __nested_webpack_require_62193__) {\n\n\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nvar react_1 = __nested_webpack_require_62193__(/*! react */ \"react\");\r\nvar Xwrapper_1 = __nested_webpack_require_62193__(/*! ./Xwrapper */ \"./src/Xwrapper.tsx\");\r\nvar useXarrow = function () {\r\n    var _a = react_1.useState({}), setRender = _a[1];\r\n    var reRender = function () { return setRender({}); };\r\n    var updateXarrow = react_1.useContext(Xwrapper_1.XelemContext);\r\n    if (!updateXarrow)\r\n        updateXarrow = function () { };\r\n    // throw new Error(\r\n    //   \"'Xwrapper' is required around element using 'useXarrow' hook! wrap your xarrows and connected elements with Xwrapper! \"\r\n    // );\r\n    react_1.useLayoutEffect(function () {\r\n        updateXarrow();\r\n    });\r\n    return reRender;\r\n};\r\nexports.default = useXarrow;\r\n\n\n/***/ }),\n\n/***/ \"lodash\":\n/*!*************************!*\\\n  !*** external \"lodash\" ***!\n  \\*************************/\n/***/ (function(module) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_lodash__;\n\n/***/ }),\n\n/***/ \"prop-types\":\n/*!*****************************!*\\\n  !*** external \"prop-types\" ***!\n  \\*****************************/\n/***/ (function(module) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_prop_types__;\n\n/***/ }),\n\n/***/ \"react\":\n/*!************************!*\\\n  !*** external \"react\" ***!\n  \\************************/\n/***/ (function(module) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_react__;\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_63847__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \t\tif (cachedModule !== undefined) {\n/******/ \t\t\treturn cachedModule.exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_63847__);\n/******/ \t\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/******/ \t// expose the module cache\n/******/ \t__nested_webpack_require_63847__.c = __webpack_module_cache__;\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/define property getters */\n/******/ \t!function() {\n/******/ \t\t// define getter functions for harmony exports\n/******/ \t\t__nested_webpack_require_63847__.d = function(exports, definition) {\n/******/ \t\t\tfor(var key in definition) {\n/******/ \t\t\t\tif(__nested_webpack_require_63847__.o(definition, key) && !__nested_webpack_require_63847__.o(exports, key)) {\n/******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t}();\n/******/ \t\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t!function() {\n/******/ \t\t__nested_webpack_require_63847__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }\n/******/ \t}();\n/******/ \t\n/******/ \t/* webpack/runtime/make namespace object */\n/******/ \t!function() {\n/******/ \t\t// define __esModule on exports\n/******/ \t\t__nested_webpack_require_63847__.r = function(exports) {\n/******/ \t\t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t\t}\n/******/ \t\t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t\t};\n/******/ \t}();\n/******/ \t\n/******/ \t/* webpack/runtime/node module decorator */\n/******/ \t!function() {\n/******/ \t\t__nested_webpack_require_63847__.nmd = function(module) {\n/******/ \t\t\tmodule.paths = [];\n/******/ \t\t\tif (!module.children) module.children = [];\n/******/ \t\t\treturn module;\n/******/ \t\t};\n/******/ \t}();\n/******/ \t\n/************************************************************************/\n/******/ \t\n/******/ \t// module cache are used so entry inlining is disabled\n/******/ \t// startup\n/******/ \t// Load entry module and return exports\n/******/ \tvar __nested_webpack_exports__ = __nested_webpack_require_63847__(__nested_webpack_require_63847__.s = \"./src/index.tsx\");\n/******/ \t\n/******/ \treturn __nested_webpack_exports__;\n/******/ })()\n;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-xarrows/lib/index.js\n");

/***/ })

};
;